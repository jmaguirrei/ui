import { processStyle } from '../../styles';export default (registerNumber, componentStyles) => {  const styleKeys = Object.keys(componentStyles);  const classStylesMapping = {};  const classStylesRules = styleKeys.reduce((acum, key) => {    if (typeof componentStyles[key] !== 'string') return acum;    // Case 1: Styles defined as string are constant, so they are applied as classNames    const newClassName = `${key}--${registerNumber}`;    classStylesMapping[key] = newClassName;    return `${acum}${processStyle(key, componentStyles[key])}`;  }, '');  // Return only inlineStyles to be attached to the component  const inlineStylesRules = styleKeys.reduce((acum, key) => {    if (typeof componentStyles[key] !== 'function') return acum;    // Case 2: Styles defined as functions are inlined in the html element    return {      ...acum,      [key]: (...args) => processStyle(key, componentStyles[key](...args)),    };  }, {});  return {    classStylesRules,    classStylesMapping,    inlineStylesRules,  };};