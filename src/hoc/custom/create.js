import { registerStyles } from '../../styles';import { getStyles } from './getStyles';import { getClassNames } from './getClassNames';import { getFinalProps } from './getFinalProps';import { getStore } from './getStore';export default (isBrowser, Store) => componentDef => {  // 1 register per definition, not instance.  const registerNumber = Store.methods.registerComponent(componentDef);  const store = getStore(Store, componentDef);  const processedClassNames = getClassNames(registerNumber, componentDef.classNames);  const processedStyles = getStyles(componentDef.styles);  const solveProps = getFinalProps({    store,    componentDef,    classNamesMapping: processedClassNames.mapping,    processedStyles,  });  // Provoque Side Effect for classNames styles  registerStyles(isBrowser, registerNumber, processedClassNames.rules);  return function renderComponent(props, children) {    const finalProps = solveProps(props);    // Called on inital render and every update    const render = () => {      const rendered = componentDef.render(finalProps, children);      return rendered;    };    // console.log('-------------------', component);    const rendered = render();    return rendered;  };};