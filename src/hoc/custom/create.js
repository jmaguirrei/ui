import styles from '../../styles';import { getFinalProps } from './getFinalProps';import { getStore } from './getStore';export default (isBrowser, Store) => componentDef => {  let processedClasses = {};  // 1 register per definition, not instance.  if (!Store.flags.MOUNTED) {    const registerNumber = Store.methods.registerComponent(componentDef);    processedClasses = styles.getClasses(registerNumber, componentDef.classes);    // Provoque Side Effect for classes styles    styles.registerStyles(isBrowser, registerNumber, processedClasses.rules);  }  const store = getStore(Store, componentDef);  const processedStyles = styles.getStyles(componentDef.styles);  const solveProps = getFinalProps({    store,    componentDef,    classesMapping: processedClasses.mapping || {},    processedStyles,  });  return function renderComponent(props, children) {    // Called on inital render and every update    const render = () => {      const finalProps = solveProps(props);      const rendered = componentDef.render(finalProps, children);      return rendered;    };    // console.log('-------------------', component);    const rendered = render();    return rendered;  };};