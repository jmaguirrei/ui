import { registerStyles } from '../../styles';import { getStyles } from './getStyles';import { getExtraProps } from './getExtraProps';import { getStore } from './getStore';export default (isBrowser, Store) => componentDef => {  // 1 register per definition, not instance.  const registerNumber = Store.methods.registerComponent(componentDef);  const store = getStore(Store, componentDef);  const getFinalExtraProps = (props, styles) => getExtraProps(store, componentDef)(props, styles);  const componentStyles = componentDef.styles || {};  const processedStyles = getStyles(registerNumber, componentStyles);  // Provoque Side Effect for classNames styles  registerStyles(isBrowser)(registerNumber, processedStyles.classStylesRules);  return function renderComponent(props, hooks, children) {    const finalExtraProps = getFinalExtraProps(props, processedStyles);    // Called on inital render and every update    const render = () => {      const rendered = componentDef.render(props, finalExtraProps, children);      return rendered;    };    // console.log('-------------------', component);    const rendered = render();    return rendered;  };};