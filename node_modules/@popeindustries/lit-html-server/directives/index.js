(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.litHtmlServer = global.litHtmlServer || {}, global.litHtmlServer.directives = global.litHtmlServer.directives || {}, global.litHtmlServer.directives.index = {})));
}(this, (function (exports) { 'use strict';

  /**
   * Determine if 'obj' is a directive function
   * @param {*} obj
   * @returns {boolean}
   */

  /**
   * Define new directive for 'fn'
   * @param {function} fn
   * @returns {function}
   */
  function directive(fn) {
    return function directive(...args) {
      const result = fn(...args);

      if (typeof result !== 'function') {
        throw Error('directives are factory functions and must return a function when called');
      }

      result.isDirective = true;
      return result;
    };
  }

  /**
   * Enables fast switching between multiple templates by caching previous results.
   * Not possible/desireable to cache between requests, so this is a no-op.
   * @param {*} value
   * @returns {function}
   */
  const cache = directive((value) => (part) => {
    if (part.isAttribute) {
      throw Error('The `cache` directive must be only be used in text nodes');
    }
    part.setValue(value);
  });

  /**
   * Apply CSS classes.
   * Only applies to 'class' attribute.
   * 'classInfo' keys are added as class names if values are truthy
   * @param {object} classInfo
   * @returns {function}
   */
  const classMap = directive((classInfo) => (part) => {
    if (!part.isAttribute || part.attributeName !== 'class') {
      throw Error('The `classMap` directive must be used in the `class` attribute');
    }

    let value = '';

    for (const key in classInfo) {
      if (classInfo[key]) {
        value += `${value.length ? ' ' : ''}${key}`;
      }
    }

    part.setValue(value);
  });

  /**
   * Guard against re-render.
   * Not possible to compare against previous render in a server context,
   * so this is a no-op.
   * @param {*} value
   * @param {function} fn
   * @returns {function}
   */
  const guard = directive((value, fn) => (part) => {
    part.setValue(fn());
  });

  /**
   * Sets the attribute if 'value' is defined,
   * removes the attribute if undefined.
   * @param {*} value
   * @returns {function}
   */
  const ifDefined = directive((value) => (part) => {
    if (value === undefined && part.isAttribute) {
      // Should import from '../string.js' but Rollup can't tree shake he.encode
      part.setValue('{__null__}');
      return;
    }
    part.setValue(value);
  });

  /**
   * Loop through 'items' and call 'template'.
   * No concept of efficient re-ordering possible in server context,
   * so this is a simple no-op map operation.
   * @param {Array} items
   * @param {function} [keyFnOrTemplate]
   * @param {function) => any} template
   * @returns {function}
   */
  const repeat = directive((items, keyFnOrTemplate, template) => {
    if (template === undefined) {
      template = keyFnOrTemplate;
    }

    return (part) => {
      part.setValue(items.map((item, index) => template(item, index)));
    };
  });

  /**
   * Apply CSS properties.
   * Only applies to 'style' attribute.
   * 'styleInfo' keys and values are added as CSS properties
   * @param {object} styleInfo
   * @returns {function}
   */
  const styleMap = directive((styleInfo) => (part) => {
    if (!part.isAttribute || part.attributeName !== 'style') {
      throw Error('The `styleMap` directive must be used in the `style` attribute');
    }

    let value = '';

    for (const key in styleInfo) {
      value += `${value.length ? '; ' : ''}${key}: ${styleInfo[key]}`;
    }

    part.setValue(value);
  });

  /**
   * Render unescaped HTML
   * @param {string} value
   * @returns {function}
   */
  const unsafeHTML = directive((value) => (part) => {
    if (part.isAttribute) {
      throw Error('unsafeHTML can only be used in text bindings');
    }
    // Should import from '../string.js' but Rollup can't tree shake he.encode
    part.setValue(`<!-- no escape -->${value}`);
  });

  function isPrimitive(value) {
    const type = typeof value;

    return value === null || !(type === 'object' || type === 'function');
  }

  /**
   * Renders one of a series of values, including Promises, in priority order.
   * Not possible to render more than once in a server context, so primitive
   * sync values are prioritised over async, unless there are no more pending
   * values, in which case the last value is always rendered regardless.
   * @param {...} args
   * @returns {function}
   */
  const until = directive((...args) => (part) => {
    for (let i = 0, n = args.length; i < n; i++) {
      const value = args[i];

      // Render sync values immediately,
      // or last value (async included) if no more values pending
      if (isPrimitive(value) || i === n - 1) {
        part.setValue(value);
        return;
      }
    }
  });

  exports.cache = cache;
  exports.classMap = classMap;
  exports.guard = guard;
  exports.ifDefined = ifDefined;
  exports.repeat = repeat;
  exports.styleMap = styleMap;
  exports.unsafeHTML = unsafeHTML;
  exports.until = until;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
