(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.litHtmlServer = global.litHtmlServer || {}, global.litHtmlServer.directives = global.litHtmlServer.directives || {}, global.litHtmlServer.directives.until = {})));
}(this, (function (exports) { 'use strict';

  /**
   * Determine if 'obj' is a directive function
   * @param {*} obj
   * @returns {boolean}
   */

  /**
   * Define new directive for 'fn'
   * @param {function} fn
   * @returns {function}
   */
  function directive(fn) {
    return function directive(...args) {
      const result = fn(...args);

      if (typeof result !== 'function') {
        throw Error('directives are factory functions and must return a function when called');
      }

      result.isDirective = true;
      return result;
    };
  }

  function isPrimitive(value) {
    const type = typeof value;

    return value === null || !(type === 'object' || type === 'function');
  }

  /**
   * Renders one of a series of values, including Promises, in priority order.
   * Not possible to render more than once in a server context, so primitive
   * sync values are prioritised over async, unless there are no more pending
   * values, in which case the last value is always rendered regardless.
   * @param {...} args
   * @returns {function}
   */
  const until = directive((...args) => (part) => {
    for (let i = 0, n = args.length; i < n; i++) {
      const value = args[i];

      // Render sync values immediately,
      // or last value (async included) if no more values pending
      if (isPrimitive(value) || i === n - 1) {
        part.setValue(value);
        return;
      }
    }
  });

  exports.until = until;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
