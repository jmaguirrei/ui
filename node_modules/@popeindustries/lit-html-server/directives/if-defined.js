(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.litHtmlServer = global.litHtmlServer || {}, global.litHtmlServer.directives = global.litHtmlServer.directives || {}, global.litHtmlServer.directives['if-defined'] = {})));
}(this, (function (exports) { 'use strict';

  /**
   * Determine if 'obj' is a directive function
   * @param {*} obj
   * @returns {boolean}
   */

  /**
   * Define new directive for 'fn'
   * @param {function} fn
   * @returns {function}
   */
  function directive(fn) {
    return function directive(...args) {
      const result = fn(...args);

      if (typeof result !== 'function') {
        throw Error('directives are factory functions and must return a function when called');
      }

      result.isDirective = true;
      return result;
    };
  }

  /**
   * Sets the attribute if 'value' is defined,
   * removes the attribute if undefined.
   * @param {*} value
   * @returns {function}
   */
  const ifDefined = directive((value) => (part) => {
    if (value === undefined && part.isAttribute) {
      // Should import from '../string.js' but Rollup can't tree shake he.encode
      part.setValue('{__null__}');
      return;
    }
    part.setValue(value);
  });

  exports.ifDefined = ifDefined;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
